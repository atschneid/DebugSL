# Timeout of the sat4j solver. 
# When the timeout is reached, a timeout exception is launched by the solver.
sat_timeout_in_millisecond=60000

# sat4j required parameter: 
# "Create how many variables in the solver (and thus in the vocabulary)."
sat_max_variable_number=50000
################################################################################

# Where the WordNet dictionary is. 
#wordNet_path=D:\\Program Files (x86)\\WordNet\\2.1\\dict
#wordNet_path=C:\\Users\\Andrew\\Documents\\wordnet\\wn3.1.dict\\dict
#wordNet_path=C:\\Users\\nmale_000\\Desktop\\Spring2016Project\\WordNet\\dict
wordNet_path= D:\\WordNet\\WordNet.Net-3.1-master\\WordNet-3.0\\dict

# Where to output the result
result_output_file=output/output.txt

# Max synsets number can be processed for each word.
# Due to the standard CNF conversion increase exponential in the size, 
# large number of majority-synsets may cause OutOfMemoryError
# If majority-synsets number > max_support_majority-synsets_number, the word will be ignored
# The bigger the value is, the more accurate the result be, and the more memory and time be used
max_support_majority-synsets_number=100

# =ONE: method 1
# =TWO: method 2
# =HYBRID: hybrid 
# CASE SENSITIVE!
method=HYBRID

# In HYBRID method ONLY,
#	when synsets number <= synsets_number_threshold_for_hybrid, method ONE is used 
#	when synsets number > synsets_number_threshold_for_hybrid, method TWO is used
synsets_number_threshold_for_hybrid=3

# Which word should be ignored;
# Because some words have too many synsets, 
# that cause too many possible combinations of majority-synsets, we need to ignore them.
ignoring_words=make,run

store_in_disk_words=
store_in_disk_path=cache

# If a word ONLY has 0-frequency synset,
# or the total synset-number <= the threshold below
# 0-frequency will be replaced by this value
default_minimun_frequency=0.1
threshold_for_replacing_zero_with_minimun_frequency=10

# Which processor you want to use
# The original one
logic_formula_processor_class_name=edu.uic.cs.cs582.process.impl.LogicFormulaProcessorImpl

# which SAT-solver you want to use, please COMMENT the other one!
# SAT4J
#sat_processor_class_name=edu.uic.cs.cs582.process.impl.Sat4jProcessorImpl
# PicoSAT/PicoMUS, only available in Linux/Unix
#sat_processor_class_name=edu.uic.cs.cs582.process.impl.PicomusProcessorImpl
sat_processor_class_name=edu.uic.cs.cs582.process.impl.Sat4jProcessorImpl
